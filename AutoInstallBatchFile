@echo off
setlocal

@REM Step 1: Define paths for vswhere utility
set "vswhere_path=C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe"

@REM Step 2: Check if vswhere exists
if not exist "%vswhere_path%" (
    echo vswhere.exe is not found. Please ensure Visual Studio Build Tools are installed.
    pause
    exit /b 1
)

@REM Step 3: Use vswhere to check for Visual Studio Build Tools installation path
for /f "tokens=*" %%i in ('"%vswhere_path%" -prerelease -latest -format value -property installationPath') do (
    set "vs_install_path=%%i"
)

if not defined vs_install_path (
    echo Visual Studio Build Tools is not installed.
    pause
    exit /b 1
) else (
    echo Visual Studio Build Tools is installed at: %vs_install_path%
)

@REM Step 4: Construct the expected path to cl.exe within the specified folder structure
set "cl_exe_folder=%vs_install_path%\VC\Tools\MSVC\*\bin\Hostx64\x64"
set "cl_exe_path=C:\Program Files (x86)\Microsoft Visual Studio\*\BuildTools\VC\Tools\MSVC\*\bin\Hostx64\x64\cl.exe"

@REM Step 5: Check if cl.exe exists in the expected folder
for /r "%vs_install_path%\VC\Tools\MSVC" %%j in (cl.exe) do (
    set "found_cl_exe=%%j"
)

if not defined found_cl_exe (
    echo cl.exe is not found in the expected Visual Studio Build Tools folder: %cl_exe_folder%
    pause
    exit /b 1
) else (
    echo cl.exe is found at: %found_cl_exe%
)

@REM Step 6: Check if cl.exe is in the system path
where cl.exe >nul 2>&1
if errorlevel 1 (
    echo cl.exe is not found in the system path.
    pause
    exit /b 1
) else (
    echo cl.exe is found in the system path.
)

echo All checks passed successfully.

@REM ------------------------------------------------------------------------------------------------
@REM Installing ComfyUI and a Venv within it
echo Installing ComfyUI, installing a Venv within it - choose your Python for it

git clone https://github.com/comfyanonymous/ComfyUI
cd ComfyUI
setlocal enabledelayedexpansion

echo From Comfy github page: "Python 3.13 is supported but using 3.12 is recommended because some custom nodes and their dependencies might not support it yet."

@REM Step 1: Locate Python installations
set "PYTHON_DIR=C:\Users\%USERNAME%\AppData\Local\Programs\Python"
if not exist "%PYTHON_DIR%" (
    echo No Python installations found in %PYTHON_DIR%.
    exit /b
)

echo Scanning available Python installations...

@REM Step 2: Find installed Python versions
set INDEX=0
for /d %%D in ("%PYTHON_DIR%\Python*") do (
    set /a INDEX+=1
    set "PYTHON_PATHS[!INDEX!]=%%D\python.exe"
    set "PYTHON_BASE[!INDEX!]=%%D"
    echo !INDEX!. %%D
)

if "%INDEX%"=="0" (
    echo No Python installations found.
    exit /b
)

@REM Step 3: Prompt user to select a Python version
set /p CHOICE=Enter the number of the Python version to use for venv: 

if not defined PYTHON_PATHS[%CHOICE%] (
    echo Invalid selection.
    exit /b
)

set "SELECTED_PYTHON=!PYTHON_PATHS[%CHOICE%]!"
set "SELECTED_BASE=!PYTHON_BASE[%CHOICE%]!"

@REM Step 4: Create a new virtual environment
set VENV_NAME=venv


echo Creating virtual environment "%VENV_NAME%" using %SELECTED_PYTHON%...
%SELECTED_PYTHON% -m venv %VENV_NAME%

if not exist "%VENV_NAME%" (
    echo Failed to create virtual environment.
    exit /b
)

@REM Step 5: Copy Include and Libs folders to the Venv (Triton)
echo Copying Include and Libs folders from %SELECTED_BASE% to %VENV_NAME%...
xcopy /E /I /Y "%SELECTED_BASE%\Include" "%VENV_NAME%\Include"
xcopy /E /I /Y "%SELECTED_BASE%\libs" "%VENV_NAME%\libs"

xcopy /E /I /Y "%SELECTED_BASE%\vcruntime140.dll" "%VENV_NAME%\Scripts\"
xcopy /E /I /Y "%SELECTED_BASE%\vcruntime140_1.dll" "%VENV_NAME%\Scripts\"

echo Virtual environment "%VENV_NAME%" created successfully!
echo Include and libs folders copied.

call venv\Scripts\activate.bat
echo Venv Activated

@REM -------------------------------------------------------------------------------------------------
@REM Installing packages for the Venv and requirements for SageAttention including Pytorch
python -m pip install --upgrade pip

pause

@REM Checking for installled Cuda version and installing latest relevant Pytorch for it
@REM setlocal enabledelayedexpansion command in a batch script is used to enable delayed variable expansion, which allows you to use variables with their values updated at execution time rather than at parse time.
setlocal enabledelayedexpansion

:: Step 1: Get the CUDA version using nvcc --version
 for /f "tokens=5 delims= " %%A in ('nvcc --version ^| findstr /C:"release"') do (
    for /f "tokens=1 delims=," %%B in ("%%A") do set cuda_version=%%B
)

REM Extract major version
for /f "tokens=1 delims=." %%a in ("%cuda_version%") do set cuda_major=%%a

REM Extract minor version
for /f "tokens=2 delims=." %%b in ("%cuda_version%") do set cuda_minor=%%b

set cuda_version=!cuda_major!.!cuda_minor!

@REM echo Major %cuda_major%
@REM echo Minor %cuda_minor%
@REM echo Version %cuda_version%

echo Detected CUDA Version: %cuda_version%

:: Step 3: Determine the closest supported CUDA version (12.4 or 12.6)
if "%cuda_version%"=="12.4" (
    set target_cuda_version=12.4
) else if "%cuda_version%"=="12.6" (
    set target_cuda_version=12.6
) else if "%cuda_version%" gtr "12.4" (
    set target_cuda_version=12.6
) else (
    set target_cuda_version=12.4
)

echo Installing PyTorch for CUDA %target_cuda_version%


:: Step 4: Construct the PyTorch installation command based on the determined CUDA version
if "%target_cuda_version%"=="12.4" (
    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124
) else if "%target_cuda_version%"=="12.6" (
    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126
) else (
    echo Unsupported CUDA version: %cuda_version%
    exit /b 1
)
echo Installation complete!
echo PyTorch with CUDA version %cuda_version% has been installed.


@REM Install the rest of the requirements for the Venv, Triton and SageAttention

pip install -r requirements.txt
pip install onnxruntime-gpu
pip install wheel
pip install setuptools
pip install packaging
pip install ninja
pip install "accelerate >= 1.1.1"
pip install "diffusers >= 0.31.0
pip install "transformers >= 4.39.3
python -m ensurepip --upgrade
python -m pip install --upgrade setuptools

echo Pytorch installed and requirements for the venv, Triton and SageAttention

pause

@REM --------------------------------------------------------------------------------------------------
@REM Install Triton Wheel for Triton & install

setlocal enabledelayedexpansion

@REM Step 1: Determine Python Major and Minor Version and display it to User
for /f "tokens=2 delims= " %%i in ('python --version') do (
    set py_version=%%i
)
for /f "tokens=1,2 delims=." %%a in ("!py_version!") do (
    set py_major_version=%%a
    set py_minor_version=%%b
)

@REM Step 2: Display the Installed Python Version (without minor version)
echo Detected Python Version: !py_major_version!.!py_minor_version!
echo !py_version!

@REM Step 3: Detect PyTorch version using Python
for /f "delims=" %%A in ('python -c "import torch; print(torch.__version__)" 2^>nul') do set "PYTORCH_VERSION=%%A"

@REM Step 4: Extract major and minor version (e.g., 2.5 from 2.5.1)
for /f "tokens=1,2 delims=." %%B in ("%PYTORCH_VERSION%") do (
    set "PYTORCH_MAJOR=%%B"
    set "PYTORCH_MINOR=%%C"
    set "PYTORCH_VERSION_SHORT=%%B.%%C"
)

@REM Step 5: Check if PyTorch is installed
if not defined PYTORCH_VERSION (
    echo ERROR: PyTorch is not installed. Please install PyTorch first.
    pause
    exit /b
)

echo Detected PyTorch version: %PYTORCH_VERSION_SHORT%

@REM Step 6: Restrict Triton versions based on PyTorch version
if "%PYTORCH_MAJOR%"=="2" (
    if "%PYTORCH_MINOR%" GEQ "6" (
        echo PyTorch 2.6+ detected. All Triton versions available.
        set "OPTION1=1 - Triton 3.2.0"
        set "OPTION2=2 - Triton 3.1.0"
    ) else if "%PYTORCH_MINOR%" GEQ "4" (
        echo PyTorch 2.4 or 2.5 detected. Triton 3.2.0 is not supported.
        set "OPTION1="
        set "OPTION2=2 - Triton 3.1.0"
    ) else (
        echo WARNING: PyTorch %PYTORCH_VERSION_SHORT% is too old! Triton 3.1.0 and 3.2.0 require PyTorch 2.4+.
        echo Only Triton 3.0.0 is available, unsure if it will work.
        set "OPTION1="
        set "OPTION2="
    )
) else (
    echo ERROR: PyTorch version not supported. Only PyTorch 2.x is allowed.
    pause
    exit /b
)

set "OPTION3=3 - Triton 3.0.0"

@REM Step 7: Display options
echo Select the package you want to download: 
if defined OPTION1 echo %OPTION1%
if defined OPTION2 echo %OPTION2%
if defined OPTION3 echo %OPTION3%

@REM Step 8: Get user choice
set /p CHOICE=Enter your choice: 

@REM Step 9: Validate selection
if "%CHOICE%"=="1" if not defined OPTION1 echo Invalid choice. Exiting. & exit /b
if "%CHOICE%"=="2" if not defined OPTION2 echo Invalid choice. Exiting. & exit /b
if "%CHOICE%"=="3" if not defined OPTION3 echo Invalid choice. Exiting. & exit /b

echo You selected Triton %CHOICE%.
if "%CHOICE%"=="1" echo Note: Triton 3.2.0 works best with PyTorch 2.6+. Upgrade recommended!

@REM Step 10: Map Python versions to corresponding wheel URLs
set WHEEL_URL=

if "%CHOICE%"=="1" (
    if "!py_major_version!.!py_minor_version!"=="3.10" set WHEEL_URL=https://github.com/woct0rdho/triton-windows/releases/download/v3.2.0-windows.post10/triton-3.2.0-cp310-cp310-win_amd64.whl
    if "!py_major_version!.!py_minor_version!"=="3.12" set WHEEL_URL=https://github.com/woct0rdho/triton-windows/releases/download/v3.2.0-windows.post10/triton-3.2.0-cp312-cp312-win_amd64.whl
    if "!py_major_version!.!py_minor_version!"=="3.13" set WHEEL_URL=https://github.com/woct0rdho/triton-windows/releases/download/v3.2.0-windows.post10/triton-3.2.0-cp313-cp313-win_amd64.whl
)

if "%CHOICE%"=="2" (
    if "!py_major_version!.!py_minor_version!"=="3.10" set WHEEL_URL=https://github.com/woct0rdho/triton-windows/releases/download/v3.1.0-windows.post9/triton-3.1.0-cp310-cp310-win_amd64.whl
    if "!py_major_version!.!py_minor_version!"=="3.11" set WHEEL_URL=https://github.com/woct0rdho/triton-windows/releases/download/v3.1.0-windows.post9/triton-3.1.0-cp311-cp311-win_amd64.whl
    if "!py_major_version!.!py_minor_version!"=="3.12" set WHEEL_URL=https://github.com/woct0rdho/triton-windows/releases/download/v3.1.0-windows.post9/triton-3.1.0-cp312-cp312-win_amd64.whl
)

if "%CHOICE%"=="3" (
    if "!py_major_version!.!py_minor_version!"=="3.10" set WHEEL_URL=https://github.com/woct0rdho/triton-windows/releases/download/v3.1.0-windows.post9/triton-3.0.0-cp310-cp310-win_amd64.whl
    if "!py_major_version!.!py_minor_version!"=="3.11" set WHEEL_URL=https://github.com/woct0rdho/triton-windows/releases/download/v3.1.0-windows.post9/triton-3.0.0-cp311-cp311-win_amd64.whl
    if "!py_major_version!.!py_minor_version!"=="3.12" set WHEEL_URL=https://github.com/woct0rdho/triton-windows/releases/download/v3.1.0-windows.post9/triton-3.0.0-cp312-cp312-win_amd64.whl
)

@REM Step 11: Validate and download the selected wheel
if "%WHEEL_URL%"=="" (
    echo No compatible wheel found for Python %PYTHON_MAJOR%.%PYTHON_MINOR% or invalid choice.
    exit /b
)

echo Installing Triton package for Python %PYTHON_MAJOR%.%PYTHON_MINOR%...
pip install %WHEEL_URL%

@REM Step 12: Deleting Tritons cached files as these can make it fault

setlocal

set "TRITON_CACHE=C:\Users\%USERNAME%\.triton\cache"
set "TORCHINDUCTOR_CACHE=C:\Users\%USERNAME%\AppData\Local\Temp\torchinductor_%USERNAME%\triton"

if exist "%TRITON_CACHE%" (
    echo Deleting .triton cache...
    rmdir /s /q "%TRITON_CACHE%" 2>nul
    mkdir "%TRITON_CACHE%"
    echo .Triton cache cleared.
) else (
    echo .Triton cache folder not found.
)

if exist "%TORCHINDUCTOR_CACHE%" (
    echo Deleting torchinductor cache...
    rmdir /s /q "%TORCHINDUCTOR_CACHE%" 2>nul
    mkdir "%TORCHINDUCTOR_CACHE%"
    echo Torchinductor cache cleared.
) else (
    echo Torchinductor cache folder not found.
)

echo Triton installed and caches cleared

pause

@REM --------------------------------------------------------------------------------------------------
@REM Install SageAttention

cd venv
git clone https://github.com/thu-ml/SageAttention
cd SageAttention
set MAX_JOBS=4

echo Make a coffee and ignore various error comments whilst SageAttention compiles

python.exe setup.py install


@REM Cleaning up SageAttention
cd ..
rmdir /s /q SageAttention
echo SageAttention installed and cleared up

pause

@REM --------------------------------------------------------------------------------------------------
@REM Deactivate venv
@REM Deactivate

@REM --------------------------------------------------------------------------------------------------
@REM Make a start bat file for Comfy
setlocal

@REM Step 1: Define the path for the new batch file
set "new_batch_file=Run_Comfyui.bat"

@REM Step 2: Create the new Comfy startup batch file
(
echo @echo off
echo cd ComfyUI
echo call venv\Scripts\activate.bat
echo echo Venv Activated
echo .\venv\Scripts\python.exe -s main.py --fast --windows-standalone-build --use-pytorch-cross-attention
echo pause
) > "%new_batch_file%"

@REM Step 3: Check if the new batch file was created successfully
if exist "%new_batch_file%" (
    echo The file %new_batch_file% has been created successfully.
) else (
    echo Failed to create the file %new_batch_file%.
)

@REM --------------------------------------------------------------------------------------------------
@REM Create a batch file to auto open a CMD window and activate the Venv
@REM Step 1: Define the path for the new batch file
set "new_batch_file2=Activate_Venv.bat"

@REM Step 2: Create the new batch file with the specified content
(
echo @echo off
echo cd ComfyUI\venv
echo call .\Scripts\activate.bat
echo echo Venv Activated
echo cmd.exe /k
) > "%new_batch_file2%"

@REM Step 3: Check if the new batch file was created successfully
if exist "%new_batch_file2%" (
    echo The file %new_batch_file2% has been created successfully.
) else (
    echo Failed to create the file %new_batch_file2%.
)

@REM --------------------------------------------------------------------------------------------------
@REM Create a batch file to update Comfy via git pull
@REM Step 1: Define the path for the new batch file
set "new_batch_file3=Update_Comfy.bat"

@REM Step 2: Create the new batch file with the specified content
(
echo @echo off
echo cd ComfyUI
echo git pull
echo pause
) > "%new_batch_file3%"

@REM Step 3: Check if the new batch file was created successfully
if exist "%new_batch_file3%" (
    echo The file %new_batch_file3% has been created successfully.
) else (
    echo Failed to create the file %new_batch_file3%.
)

echo Three bat files saved to install folder 
echo   1. ComfyUI start 
echo   2. Activate the venv for manual input 
echo   3. Update via git pull
pause

@REM --------------------------------------------------------------------------------------------------
@REM Installing Comfy Manager rather than faffing around 
cd ..
cd custom_nodes

git clone https://github.com/ltdrdata/ComfyUI-Manager.git
git clone https://github.com/crystian/ComfyUI-Crystools

echo Cloning of ComfyUI-Manager and Crystools Nodes/Resource Monitor completed, copy across your extra_model_paths.yaml file now start ComfyUI.
echo Cheerio

endlocal
pause
cmd.exe /k
